<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Latest News | SUP4RNET</title><link>https://sup4rnet.github.io/blog/</link><atom:link href="https://sup4rnet.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><description>Latest News</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Fri, 26 Jul 2024 00:00:00 +0000</lastBuildDate><image><url>https://sup4rnet.github.io/media/icon_huae01d6fbd47227582bbdbe187fcb584f_521710_512x512_fill_lanczos_center_3.png</url><title>Latest News</title><link>https://sup4rnet.github.io/blog/</link></image><item><title>Cluster kick-off! New partners from UniBO joining SUP4ERNET</title><link>https://sup4rnet.github.io/blog/unibo-callegati-joins/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><guid>https://sup4rnet.github.io/blog/unibo-callegati-joins/</guid><description>&lt;p>Debut award for the research group of University of Bologna lead by Prof. Franco Callegati! Kudos &amp;#x1f973;&lt;/p></description></item><item><title>About multi-tenancy on Tofino hardware</title><link>https://sup4rnet.github.io/blog/about-multitenancy/</link><pubDate>Sat, 08 Jun 2024 00:00:00 +0000</pubDate><guid>https://sup4rnet.github.io/blog/about-multitenancy/</guid><description>&lt;p>Given the multi-tenancy nature of the cluster, isolation mechanisms are essential to prevent tenants from interfering with each other and to ensure the ability to run concurrent experiments. Differently from general-purpose compute infrastructure, existing programmable data-plane technologies lack the essential support for multi-tenancy. This is also the case for the Intel Tofino products line.&lt;/p>
&lt;p>These switches are equipped with multiple packet processing pipelines that can be programmed individually, thus in principle enabling some form of parallel program execution. However, they do not implement any mechanism for fault, resource and performance isolation across programs of different tenants, which can interfere with each other, either by accident or maliciously. As a result, every time a P4 program is installed, all pipelines undergo a complete reconfiguration, potentially causing disruption to the operations of other tenants&amp;rsquo; programs.&lt;/p>
&lt;blockquote>
&lt;p>Do we have a way to enable concurrent program execution while avoiding interference among tenants?&lt;/p>
&lt;/blockquote>
&lt;h3 id="virtualizing-hardware-resources-for-multi-tenancy">Virtualizing Hardware Resources for Multi-Tenancy&lt;/h3>
&lt;p>To enable concurrent program execution while avoiding interference among tenants, there are several approaches that can be considered:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Compile-Time Merging&lt;/strong>: This approach involves statically combining and compiling the P4 programs of different tenants into a single P4 binary. This merged binary is then installed on the target switch. On this line of work we find P4Visor&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. However, the compiling phase and pipeline re-configuration before runtime may require active tedious coordination cycles across tenants.&lt;/li>
&lt;/ol>
&lt;ol start="2">
&lt;li>&lt;strong>Hypervisor-Like P4 Programs&lt;/strong>: Solutions like HyPer4&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> instead use a hypervisor-like P4 program to dynamically emulate other P4 programs. This approach provides the illusion of multiple data plane programs but incurs significant overheads, limiting its applicability to software and FPGA targets.&lt;/li>
&lt;/ol>
&lt;ol start="3">
&lt;li>&lt;strong>Reconfigurable Match-Action (RMT) Hardware Extensions&lt;/strong>: More recent work, such as Menshen&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> propose extensions to the RMT hardware architecture for data-plane multi-tenancy. Menshen adds an indirection layer using small tables to dynamically load different per-tenant configurations for the same RMT resource. While these solutions allow running per-tenant packet processing logic, they are not specifically designed for Tofino hardware.&lt;/li>
&lt;/ol>
&lt;ol start="4">
&lt;li>&lt;strong>State-of-the-art transparent virtualization&lt;/strong>: SwitchVM&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> introduces a runtime interpreter that allows the execution of Data Plane Filters (DPFs) in a P4 sandbox environment. SwitchVM does not require pipeline reconfiguration when installing new DPFs, as it involves installing match-action rules that redirect to a fixed set of executable instructions. Similarly to eBPF programs, DPFs are short programs which can be pre-installed on a PISA-like device and whose execution is triggered by arriving packets. In other words, installing new DPFs consists in installing match-action rules that redirect to a fixed set of executable instructions (e.g., &lt;code>ADD&lt;/code>, &lt;code>MOV&lt;/code>, etc.) implemented as atomic P4 actions, thus not involving any pipeline reconfiguration. Thus, SwitchVM enables time-sharing of the pipeline hardware across multiple tenants. Moreover, it guarantees strict resource isolation between DPFs belonging to different tenants, thanks to virtual registers with load/store instructions to access per-tenant state.
It enables time-sharing of the pipeline hardware across multiple tenants and guarantees strict resource isolation between DPFs belonging to different tenants. It effectively achieves transparent virtualization from a hardware standpoint, however tenants must write code using a new instruction set, and not all P4 constructs are reflected into the DPF instruction set.
Ultimately, SwitchVM has been implemented on a Tofino target and thus it is an interesting approach to consider for SUPERNET.&lt;/li>
&lt;/ol>
&lt;p>These approaches provide ways to virtualize hardware resources and enable concurrent program execution while ensuring isolation among tenants in a multi-tenancy environment. However, not all of them have been tested on Tofino switches, or require some extra effort to the P4 developer.&lt;/p>
&lt;p>Initially, we opted for a static resource reservation system which grants exclusive access to the switch to one user at a time, providing isolation but not concurrency on the hardware.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>P. Zheng, T. Benson, and C. Hu, “P4visor: lightweight virtualization and composition primitives for building and testing modular programs,” in &lt;em>Proceedings of the 14th International Conference on Emerging Networking EXperiments and Technologies&lt;/em>, Association for Computing Machinery, 2018.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>D. Hancock and J. van der Merwe, “HyPer4: Using P4 to virtualize the programmable dataplane,” in &lt;em>Proceedings of the 12th International on Conference on Emerging Networking EXperiments and Technologies&lt;/em>, Association for Computing Machinery, 2016&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>T. Wang, X. Yang, G. Antichi, A. Sivaraman, and A. Panda, “Isolation mechanisms for High-Speed Packet-Processing pipelines,” in &lt;em>19th USENIX Symposium on Networked Systems Designand Implementation (NSDI 22)&lt;/em>. USENIX Association, 2022.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>S. Khashab, A. Rashelbach, and M. Silberstein, “Multitenant In-Network acceleration with SwitchVM,” in &lt;em>21st USENIX Symposium on Networked Systems Design and Implementation
(NSDI 24)&lt;/em>. USENIX Association, 2024.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Pre-release testing phase has started.</title><link>https://sup4rnet.github.io/blog/beta-testing/</link><pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate><guid>https://sup4rnet.github.io/blog/beta-testing/</guid><description>&lt;p>Well done Zhihao! Zhihao Wang has been the first beta tester for our cluster, thanks to him we could spot and patch few issues and reaching the point of a more stable state.&lt;/p>
&lt;p>Zhihao is a PhD student at Politecnico di Torino and he has just started a new project that aims at using P4 switches in a very intriguing cybersecurity project. We asked him to report any issue occurring while using the nodes, and he has done a great job in assisting us with the testing and documentation. Kudos to him!&lt;/p>
&lt;p>
&lt;figure id="figure-initial-deployment-phase-of-tofino-switches-in-the-sup4rnet-cluster-in-one-of-the-politecnico-di-torinos-campus-data-centers">
&lt;div class="flex justify-center ">
&lt;div class="w-100" >&lt;img alt="screen reader text" srcset="
/media/supernet_hu214af4df9337d08f49c802ddf21d0dfa_12217933_d0fa0b1b510b72458c4bbe61b33931e4.webp 400w,
/media/supernet_hu214af4df9337d08f49c802ddf21d0dfa_12217933_452385c6bba190ddec80e9fd0028f075.webp 760w,
/media/supernet_hu214af4df9337d08f49c802ddf21d0dfa_12217933_1200x1200_fit_q85_h2_lanczos.webp 1200w"
src="https://sup4rnet.github.io/media/supernet_hu214af4df9337d08f49c802ddf21d0dfa_12217933_d0fa0b1b510b72458c4bbe61b33931e4.webp"
width="570"
height="760"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Initial deployment phase of Tofino switches in the SUP4RNET cluster in one of the Politecnico di Torino&amp;rsquo;s campus data centers.
&lt;/figcaption>&lt;/figure>
&lt;/p>
&lt;p>Few months before, we decided to boost up the noise level of our Poltecnico di Torino data center by installing the two guys here, and believe me they are way more noisy than expected! That was fun!&lt;/p></description></item></channel></rss>